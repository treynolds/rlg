package rw;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.*;
import javax.swing.table.*;
import java.io.*;
import java.util.HashMap;
import java.util.Vector;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map.Entry;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.helpers.*;
//JAXP 1.1
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import javax.xml.transform.sax.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/*
 * RandomWords.java
 *
 * Created on Jan 22, 2011, 4:10:16 PM
 */
/**
 *
 * @author ted
 */
public class RandomWords extends javax.swing.JFrame {

    private int maximumSyllables = 4;

    /** Creates new form RandomWords */
    public RandomWords() {
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        try {
            javax.swing.UIManager uim = new javax.swing.UIManager();
            uim.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
        setIconImage(new ImageIcon("rw/images/lcs_icon.png").getImage());
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension tdim = getSize();
        int x = (int) dim.getWidth() / 2;
        int y = (int) dim.getHeight() / 2;
        int tx = (int) tdim.getWidth() / 2;
        int ty = (int) tdim.getHeight() / 2;
        setLocation(x - tx, y - ty);
        dtm = (DefaultTableModel) wordTable.getModel();
        wordTable.setDefaultRenderer(definitionsName.getClass(), tcr);
        syllablePattern = "CV";
        syllablePatternList = "CV 0";
        writingSystem.put("NumberOfLetters", 26);
        writingSystem.put("CapRule", "Nouns");
        writingSystem.put("Font", "LCS-ConstructorII");
        writingSystem.put("GlyphsPerLetter", 2);
        writingSystem.put("System", "Alphabet");
        writingSystem.put("FontType", "borrowed");
        HashMap gum = new HashMap();
        gum.put("Glyph_1", "Lower");
        gum.put("Glyph_2", "Upper");
        writingSystem.put("GlyphUseMap", gum);
        HashMap phones = new HashMap();
        String phn = "abcdefghijklmnopqrstuvwxyz";
        String phm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for (int a = 0; a < phn.length(); a++) {
            phones.put(phn.charAt(a) + "", phn.charAt(a) + " " + phm.charAt(a));
        }
        writingSystem.put("Phonemes", phones);
        HashMap punct = new HashMap();
        String punctMarks = " !\"#$%&\'()*+,-./0123456789:;<=>?@[\\]^_`{|}~";
        for(int p = 0;p < punctMarks.length(); p ++){
            punct.put(punctMarks.charAt(p)+"",punctMarks.charAt(p)+"");
        }
        writingSystem.put("Punctuation", punct);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vowels = new java.util.Vector();
        vowels.add("a");
        vowels.add("e");
        vowels.add("i");
        vowels.add("o");
        vowels.add("u");
        consonants = new java.util.Vector();
        consonants.add("b");
        consonants.add("c");
        consonants.add("d");
        consonants.add("f");
        consonants.add("g");
        consonants.add("h");
        consonants.add("j");
        consonants.add("k");
        consonants.add("l");
        consonants.add("m");
        consonants.add("n");
        consonants.add("p");
        consonants.add("q");
        consonants.add("r");
        consonants.add("s");
        consonants.add("t");
        consonants.add("v");
        consonants.add("w");
        consonants.add("x");
        consonants.add("y");
        consonants.add("z");
        words = new java.util.Vector();
        dictionary = new rw.RwDictionary();
        tcr = new rw.RwCellRenderer();
        dtm = new javax.swing.table.DefaultTableModel();
        syllablePattern = new java.lang.String();
        projectName = new java.lang.String();
        definitionsName = new java.lang.String();
        posRules = new java.util.HashMap();
        String[] posArry = {"Adjective","Adverb","Article","Comp Adjective",
            "Comp Adverb","Conjunction","Determiner","Interjection",
            "List","Modal","Noun","Noun Plural","Noun Plural Proper",
            "Noun Proper","Number","Particle","Possesive",
            "Pos Pronoun","Pers Pronoun","Predeterminer","Preposition",
            "Pronoun","Super Adjective","Super Adverb","Symbol","There",
            "To","Verb","Verb 3 pers","Verb non 3 pers","Verb Past",
            "Verb Past Part","Verb Gerund","Wh Adverb","Wh Determiner",
            "Pos Wh Pronoun","Wh Pronoun"};
        for(int a = 0; a < posArry.length; a++){
            Vector rule = new Vector();
            rule.addElement(false);
            rule.addElement(null);
            rule.addElement(0);
            rule.addElement(false);
            rule.addElement(true);
            posRules.put(posArry[a], rule);
        }
        syllablePatternList = new java.lang.String();
        jPanel1 = new javax.swing.JPanel();
        wordScroller = new javax.swing.JScrollPane();
        wordTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        loadDefinitionsButton = new javax.swing.JButton();
        generateWordsButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        quitButton.putClientProperty("JComponent.sizeVariant", "Large");
        refreshButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newItem = new javax.swing.JMenuItem();
        loadItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        loadDefinitionsItem = new javax.swing.JMenuItem();
        saveDefinitionsItem = new javax.swing.JMenuItem();
        saveDefinitionsAsItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        quitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoItem = new javax.swing.JMenuItem();
        redoItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        cutItem = new javax.swing.JMenuItem();
        copyItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        insertMenuItem = new javax.swing.JMenuItem();
        pasteItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        findItem = new javax.swing.JMenuItem();
        replaceItem = new javax.swing.JMenuItem();
        projectMenu = new javax.swing.JMenu();
        generateItem = new javax.swing.JMenuItem();
        consonantItem = new javax.swing.JMenuItem();
        rulesItem = new javax.swing.JMenuItem();
        maxSyllablesItem = new javax.swing.JMenuItem();
        syllableItem = new javax.swing.JMenuItem();
        vowelsItem = new javax.swing.JMenuItem();
        writingItem = new javax.swing.JMenuItem();
        translateItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpContentsItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();

        tcr.setText("rwCellRenderer1"); // NOI18N

        syllablePattern="CV";

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Random Language Generator - [Untitled]"); // NOI18N

        wordTable.setAutoCreateRowSorter(true);
        wordTable.setFont(new java.awt.Font("LCS-ConstructorII", 0, 24));
        wordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Word #", "POS", "Definition", "Pronunciation", "Writing System"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        wordTable.setRowHeight(30);
        wordTable.getTableHeader().setReorderingAllowed(false);
        wordScroller.setViewportView(wordTable);
        wordTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        wordTable.getColumnModel().getColumn(0).setMinWidth(100);
        wordTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        wordTable.getColumnModel().getColumn(0).setMaxWidth(100);
        wordTable.getColumnModel().getColumn(1).setMinWidth(80);
        wordTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        wordTable.getColumnModel().getColumn(1).setMaxWidth(80);
        wordTable.getColumnModel().getColumn(4).setCellRenderer(tcr);

        saveButton.setText("Save"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadDefinitionsButton.setText("Load Definitions"); // NOI18N
        loadDefinitionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDefinitionsButtonActionPerformed(evt);
            }
        });

        generateWordsButton.setText("Generate Words"); // NOI18N
        generateWordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateWordsButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit"); // NOI18N
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh"); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wordScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadDefinitionsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateWordsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                        .addComponent(quitButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wordScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(loadDefinitionsButton)
                    .addComponent(generateWordsButton)
                    .addComponent(quitButton)
                    .addComponent(refreshButton))
                .addContainerGap())
        );

        fileMenu.setText("File"); // NOI18N

        newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newItem.setText("New"); // NOI18N
        newItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemActionPerformed(evt);
            }
        });
        fileMenu.add(newItem);

        loadItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadItem.setText("Load..."); // NOI18N
        loadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save"); // NOI18N
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsItem.setText("Save As..."); // NOI18N
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsItem);
        fileMenu.add(jSeparator1);

        loadDefinitionsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        loadDefinitionsItem.setText("Load Definitions..."); // NOI18N
        loadDefinitionsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDefinitionsItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadDefinitionsItem);

        saveDefinitionsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveDefinitionsItem.setText("Save Definitions"); // NOI18N
        saveDefinitionsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDefinitionsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveDefinitionsItem);

        saveDefinitionsAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveDefinitionsAsItem.setText("Save Definitions As..."); // NOI18N
        saveDefinitionsAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDefinitionsAsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveDefinitionsAsItem);
        fileMenu.add(jSeparator2);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitItem.setText("Quit"); // NOI18N
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit"); // NOI18N

        undoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoItem.setText("Undo"); // NOI18N
        undoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoItemActionPerformed(evt);
            }
        });
        editMenu.add(undoItem);

        redoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoItem.setText("Redo"); // NOI18N
        redoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoItemActionPerformed(evt);
            }
        });
        editMenu.add(redoItem);
        editMenu.add(jSeparator3);

        cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutItem.setText("Cut"); // NOI18N
        cutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutItemActionPerformed(evt);
            }
        });
        editMenu.add(cutItem);

        copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyItem.setText("Copy"); // NOI18N
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });
        editMenu.add(copyItem);

        editMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        editMenuItem.setText("Edit ...");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editMenuItem);

        insertMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        insertMenuItem.setText("Insert");
        editMenu.add(insertMenuItem);

        pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteItem.setText("Paste"); // NOI18N
        pasteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteItem);
        editMenu.add(jSeparator4);

        findItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        findItem.setText("Find"); // NOI18N
        findItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findItemActionPerformed(evt);
            }
        });
        editMenu.add(findItem);

        replaceItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        replaceItem.setText("Replace"); // NOI18N
        replaceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceItemActionPerformed(evt);
            }
        });
        editMenu.add(replaceItem);

        jMenuBar1.add(editMenu);

        projectMenu.setText("Project"); // NOI18N

        generateItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        generateItem.setText("Generate"); // NOI18N
        generateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateItemActionPerformed(evt);
            }
        });
        projectMenu.add(generateItem);

        consonantItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        consonantItem.setText("Set Consonants"); // NOI18N
        consonantItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consonantItemActionPerformed(evt);
            }
        });
        projectMenu.add(consonantItem);

        rulesItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        rulesItem.setText("Set POS Rules"); // NOI18N
        rulesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesItemActionPerformed(evt);
            }
        });
        projectMenu.add(rulesItem);

        maxSyllablesItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        maxSyllablesItem.setText("Set Maximum Syllables"); // NOI18N
        maxSyllablesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxSyllablesItemActionPerformed(evt);
            }
        });
        projectMenu.add(maxSyllablesItem);

        syllableItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        syllableItem.setText("Set Syllable Patterns"); // NOI18N
        syllableItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syllableItemActionPerformed(evt);
            }
        });
        projectMenu.add(syllableItem);

        vowelsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        vowelsItem.setText("Set Vowels"); // NOI18N
        vowelsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vowelsItemActionPerformed(evt);
            }
        });
        projectMenu.add(vowelsItem);

        writingItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        writingItem.setText("Set Writing System"); // NOI18N
        writingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writingItemActionPerformed(evt);
            }
        });
        projectMenu.add(writingItem);

        translateItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        translateItem.setText("Translate Text"); // NOI18N
        translateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateItemActionPerformed(evt);
            }
        });
        projectMenu.add(translateItem);

        jMenuBar1.add(projectMenu);

        helpMenu.setText("Help"); // NOI18N

        helpContentsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SLASH, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        helpContentsItem.setText("Help Contents"); // NOI18N
        helpContentsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpContentsItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpContentsItem);

        aboutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        aboutItem.setText("About"); // NOI18N
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        quitItemActionPerformed(evt);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void loadDefinitionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDefinitionsButtonActionPerformed
        final JFileChooser jfc = new JFileChooser(".");
        int chosenOption = jfc.showOpenDialog(rootPane);
        if (chosenOption != jfc.CANCEL_OPTION) {
            final RwProgressPane pgp = new RwProgressPane(this, false, false);
            pgp.setVisible(true);
            SwingWorker t = new SwingWorker() {
                public Integer doInBackground() {
                    Integer finished = new Integer(0);
                    File definitions = jfc.getSelectedFile();
                    definitionsName = definitions.getName();
                    if (definitionsName.endsWith(".csv")) {
                        definitionsName = definitionsName.substring(0,
                                definitionsName.length() - 4);
                    }
                    words.clear();
                    dictionary.clear();
                    wordCount = 0;
                    try {
                        BufferedReader in = new BufferedReader(new FileReader(definitions));
                        String defLine = "";
                        while ((defLine = in.readLine()) != null) {
                            String splitter = ",";
                            defLine = defLine.replace("\"", "");
                            String[] stuff = {"", "", "", "", "", ""};
                            String[] stff = defLine.split(splitter);
                            stuff[0] = strip(stff[0]).trim();
                            stuff[1] = strip(stff[1]).trim();
                            if (stff.length < 3) {
                                stuff[2] = " ";
                                stuff[3] = "0";
                            } else {
                                stuff[2] = strip(stff[2]).trim();
                            }
                            if (stff.length < 5) {
                                stuff[3] = "2";
                                stuff[4] = "xxx";
                                stuff[5] = "0";
                            } else if (stff.length < 6){
                                stuff[4] = "xxx";
                                stuff[5] = "0";
                            } else {
                                stuff[3] = stff[3];
                                stuff[4] = stff[4];
                                stuff[5] = stff[5];
                            }
                            RwDictionaryEntry rde = new RwDictionaryEntry(stuff);
                            //System.out.println(rde + "");
                            if (vowels.size() > 0 && consonants.size() > 0) {
                                //do {
                                    rde.setMeaning(rde.generateMeaning(
                                            syllablePatternList, vowels, consonants, rde.getPos(), posRules,
                                            rde.getDefinition(), maximumSyllables));
                                //} while (words.contains(rde.getMeaning()));// && !rde.getPtTag().contains("nnp"));
                            }
                            dictionary.addEntry(rde);
                            words.addElement(rde.getMeaning());
                            wordCount++;
                            float percent = (((float) (rde.getDefinition().charAt(0) - 96)) / 26) * 100;
                            //System.out.println(percent);
                            pgp.updateProgress((int) percent);
                        };
                        in.close();
                        pgp.quit();
                        done();
                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    } catch (NullPointerException ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    } finally {
                        pgp.quit();
                        finished = 1;
                        updateTable();
                        return finished;
                    }
                }
            };
            t.execute();

            //pgp.quit();
            //updateTable();

        }
    }//GEN-LAST:event_loadDefinitionsButtonActionPerformed

    private void consonantItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consonantItemActionPerformed
        RwVowelConsonantDialog cd = null;
        if (consonants.isEmpty()) {
            cd = new RwVowelConsonantDialog(this, true);
        } else {
            cd = new RwVowelConsonantDialog(this, true, consonants);
        }
        cd.setTitle("Set Up Consonants");
        cd.setVisible(true);
        if (RwVowelConsonantDialog.OK_OPTION == cd.getChosenOption()) {
            consonants.clear();
            consonants.addAll(cd.getData());
        }
    }//GEN-LAST:event_consonantItemActionPerformed

    private void vowelsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vowelsItemActionPerformed
        RwVowelConsonantDialog vd = null;
        if (vowels.isEmpty()) {
            vd = new RwVowelConsonantDialog(this, true);
        } else {
            vd = new RwVowelConsonantDialog(this, true, vowels);
        }
        vd.setTitle("Set Up Vowels");
        vd.setVisible(true);
        if (RwVowelConsonantDialog.OK_OPTION == vd.getChosenOption()) {
            vowels.clear();
            vowels.addAll(vd.getData());
        }
    }//GEN-LAST:event_vowelsItemActionPerformed

    private void syllableItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syllableItemActionPerformed
        String osp = syllablePattern;

        rwSyllablePatternsDialogII sypd = new rwSyllablePatternsDialogII(syllablePatternList);
        syllablePatternList = "";
        int result = JOptionPane.showConfirmDialog(this, sypd, "Enter Patterns", JOptionPane.OK_CANCEL_OPTION);
        if (result != JOptionPane.CANCEL_OPTION){
            int numberOfPatterns = ((Integer)sypd.numberPatternsSpinner.getValue()).intValue();
            for(int ns = 0; ns < numberOfPatterns; ns ++){
                syllablePatternList += sypd.patternsTable.getValueAt(ns, 0) + " ";
            }
            syllablePatternList += sypd.randomnessCombo.getSelectedIndex();
            System.out.println(syllablePatternList);
        }
        //syllablePattern = (String) JOptionPane.showInputDialog(this, "Enter syllable pattern", syllablePattern);
        if (syllablePattern != null) {
            /*if (syllablePattern.indexOf("[") >= 0 && syllablePattern.indexOf("]") < 0) {
                JOptionPane.showMessageDialog(this, "Illegal Syllable Structure\n expected ']'", "Oops!",
                        JOptionPane.ERROR_MESSAGE);
                syllableItemActionPerformed(evt);
            }
            if (syllablePattern.indexOf("[") >= 0 && syllablePattern.indexOf(",") < 0) {
                JOptionPane.showMessageDialog(this, "Illegal Syllable Structure\n expected ','", "Oops!",
                        JOptionPane.ERROR_MESSAGE);
                syllableItemActionPerformed(evt);
            }
            if (syllablePattern.indexOf("{") >= 0 && syllablePattern.indexOf("}") < 0) {
                JOptionPane.showMessageDialog(this, "Illegal Syllable Structure\n expected '}'", "Oops!",
                        JOptionPane.ERROR_MESSAGE);
                syllableItemActionPerformed(evt);
            }
            if (syllablePattern.indexOf("{") >= 0 && syllablePattern.indexOf(",") < 0) {
                JOptionPane.showMessageDialog(this, "Illegal Syllable Structure\n expected ','", "Oops!",
                        JOptionPane.ERROR_MESSAGE);
                syllableItemActionPerformed(evt);
            }
            if (syllablePattern.indexOf("{") >= 0 && syllablePattern.indexOf(":") < 0) {
                JOptionPane.showMessageDialog(this, "Illegal Syllable Structure\n expected ':'", "Oops!",
                        JOptionPane.ERROR_MESSAGE);
                syllableItemActionPerformed(evt);
            }//*/
            if (syllablePatternList.indexOf("\\u") > 0) {
                int a = 0;
                while ((a = syllablePatternList.indexOf("\\u", a + 1)) > 0) {
                    String unicodeString = syllablePatternList.substring(a + 2, a + 6);
                    char uniChar = (char) Integer.parseInt(unicodeString, 16);
                    syllablePatternList = syllablePatternList.substring(0, a)
                            + uniChar + syllablePatternList.substring(a + 6);
                    System.out.println(syllablePatternList);
                }
            }//*/
        } else {
            syllablePattern = osp;
        }
    }//GEN-LAST:event_syllableItemActionPerformed

    private void generateWordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateWordsButtonActionPerformed
        final RwProgressPane pgp = new RwProgressPane(this, false, false);
        pgp.setVisible(true);
        SwingWorker t = new SwingWorker() {
            public Integer doInBackground() {
                words.clear();
                for (int a = 0; a < dictionary.size(); a++) {
                    dictionary.setMeaningAt("", a);
                }
                updateTable();
                for (int a = 0; a < dictionary.size(); a++) {
                    RwDictionaryEntry rde = dictionary.getEntryAt(a);
                    if (rde.getRoot().equals("r")) {
                        //do {
                            //System.out.println("<"+syllablePatternList+">");
                            rde.setMeaning(rde.generateMeaning(
                                    syllablePatternList, vowels, consonants, rde.getPos(), posRules,
                                    rde.getDefinition(), maximumSyllables));
                        //} while (words.contains(rde.getMeaning()));// && !rde.getPtTag().contains("nnp"));
                        words.add(rde.getMeaning());
                    }
                    float percent = ((((float) a / dictionary.size())) / 2) * 100;
                    pgp.updateProgress((int) percent);
                }
                for (int a = 0; a < dictionary.size(); a++) {
                    RwDictionaryEntry rde = dictionary.getEntryAt(a);
                    if (!rde.getRoot().equals("r")) {
                        String definition = rde.getDefinition();
                        RwDictionaryEntry rdw = dictionary.findRootFromDefinition(definition);
                        rde.setMeaning(rdw.getMeaning());
                        String meaning = rdw.applyPosRule(rde, posRules);
                        rde.setMeaning(meaning);
                    }
                    float percent = 50 + (((float) a / dictionary.size())) * 100;
                    pgp.updateProgress((int) percent);
                }
                updateTable();
                pgp.quit();
                return 0;
            }
        };
        t.execute();
    }//GEN-LAST:event_generateWordsButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveItemActionPerformed(evt);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed
        wordCount = 0;
        dictionary.clear();
        final JFileChooser jfc = new JFileChooser(".");
        int chosenOption = jfc.showOpenDialog(this);
        if (chosenOption != jfc.CANCEL_OPTION) {
            final RwProgressPane pgp = new RwProgressPane(this, false, true);
            pgp.setVisible(true);
            SwingWorker t = new SwingWorker() {
                public Integer doInBackground() {
                    projectName = jfc.getSelectedFile().getName();
                    setTitle("Random Language Generator - " + projectName);
                    SAXParserFactory factory = SAXParserFactory.newInstance();
                    try {
                        SAXParser saxParser = factory.newSAXParser();
                        DefaultHandler handler = new DefaultHandler() {

                            boolean vowelsTag = false;
                            boolean consonantsTag = false;
                            boolean ruleTag = false;
                            boolean syllableTag = false;
                            boolean dictionaryEntryTag = false;
                            boolean numberOfLettersTag = false;
                            boolean capRuleTag = false;
                            boolean phonemeTag = false;
                            boolean phonemesTag = false;
                            boolean fontTag = false;
                            boolean fontTypeTag = false;
                            boolean glyphUseTag = false;
                            boolean numberGlyphsTag = false;
                            boolean vowelsShownTag = false;
                            boolean systemTag = false;
                            boolean pkey = false;
                            boolean pvalue = false;
                            boolean numberGraphemesTag = false;
                            boolean punctTag = false;
                            boolean glyph1Tag = false;
                            boolean glyph2Tag = false;
                            boolean glyph3Tag = false;
                            boolean glyph4Tag = false;

                            HashMap phnms= new HashMap();
                            String key ="";
                            String value = "";

                            public void startElement(String uri, String localName, String qName,
                                    Attributes attributes) throws SAXException {

                                //System.out.print("S ");
                                if (qName.equalsIgnoreCase("Vowels")) {
                                    vowelsTag = true;
                                }
                                if (qName.equalsIgnoreCase("Consonants")) {
                                    consonantsTag = true;
                                }
                                if (qName.equalsIgnoreCase("Rule")) {
                                    ruleTag = true;
                                }
                                if (qName.equalsIgnoreCase("Syllables")) {
                                    syllableTag = true;
                                }
                                if (qName.equalsIgnoreCase("DictionaryEntry")) {
                                    dictionaryEntryTag = true;
                                }
                                if (qName.equalsIgnoreCase("NumberOfLetters")) {
                                    numberOfLettersTag = true;
                                }
                                if (qName.equalsIgnoreCase("CapRule")) {
                                    capRuleTag = true;
                                }
                                if (qName.equalsIgnoreCase("Phonemes")) {
                                    phonemeTag = true;
                                }
                                if (qName.equalsIgnoreCase("pkey")){
                                    pkey = true;
                                }
                                if (qName.equalsIgnoreCase("Font")) {
                                    fontTag = true;
                                }
                                if (qName.equalsIgnoreCase("FontType")) {
                                    fontTypeTag = true;
                                }
                                if (qName.equalsIgnoreCase("GlyphUseMap")){
                                    glyphUseTag = true;
                                }
                                if (qName.equalsIgnoreCase("Glyph_1")){
                                    glyph1Tag = true;
                                }
                                if (qName.equalsIgnoreCase("Glyph_2")){
                                    glyph2Tag = true;
                                }
                                if (qName.equalsIgnoreCase("Glyph_3")){
                                    glyph3Tag = true;
                                }
                                if (qName.equalsIgnoreCase("Glyph_4")){
                                    glyph4Tag = true;
                                }
                                if (qName.equalsIgnoreCase("GlyphsPerLetter")){
                                    numberGlyphsTag = true;
                                }
                                if (qName.equalsIgnoreCase("System")){
                                    systemTag = true;
                                }
                                if (qName.equalsIgnoreCase("pvalue")){
                                    pvalue = true;
                                }
                                if (qName.equalsIgnoreCase("phonemes")){
                                    phonemesTag = true;
                                }
                                if (qName.equalsIgnoreCase("graphemesperglyph")){
                                    numberGraphemesTag = true;
                                }
                                if (qName.equalsIgnoreCase("Punctuation")){
                                    punctTag = true;
                                }
                            }

                            public void endElement(String uri, String localName, String qName)
                                    throws SAXException {
                                //System.out.print("E:");
                            }

                            public void characters(char ch[], int start, int length) throws SAXException {

                                if (vowelsTag) {
                                    vowels.clear();
                                    String v = new String(ch, start, length);
                                    String[] va = v.split(",");
                                    for (int a = 0; a < va.length; a++) {
                                        if(va[a].contains(" ")){
                                            String[] vb = va[a].split(" ");
                                            String vc = "";
                                            for(int b = 0; b < vb.length; b ++){
                                                vc += (char)Integer.parseInt(vb[b],16);
                                            }
                                        } else {
                                            vowels.add(((char)Integer.parseInt(va[a],16))+"");
                                        }
                                    }
                                    vowelsTag = false;
                                }
                                if (consonantsTag) {
                                    consonants.clear();
                                    String v = new String(ch, start, length);
                                    String[] va = v.split(",");
                                    for (int a = 0; a < va.length; a++) {
                                        if(va[a].contains(" ")){
                                            String[] vb = va[a].split(" ");
                                            String vc="";
                                            for(int b=0; b<vb.length;b++){
                                                vc+=(char)Integer.parseInt(vb[b],16);
                                            }
                                            consonants.add(vc);
                                        } else {
                                            consonants.add(((char)Integer.parseInt(va[a],16))+"");
                                        }
                                    }
                                    consonantsTag = false;
                                }
                                if (ruleTag) {
                                    String s = new String(ch, start, length);
                                    Vector r = new Vector();
                                    String ps = s.substring(0, s.indexOf(":"));
                                    //System.out.print(ps + " ");
                                    String[] rl = (s.substring(s.indexOf("[") + 1, s.indexOf("]"))).split(", ");
                                    r.addElement(Boolean.parseBoolean(rl[0]));
                                    if (!rl[1].equals("null")) {
                                        r.addElement(rl[1]);
                                    } else {
                                        r.addElement("");
                                    }
                                    r.addElement(Integer.parseInt(rl[2]));
                                    r.addElement(Boolean.parseBoolean(rl[3]));
                                    r.addElement(Boolean.parseBoolean(rl[4]));
                                    //System.out.println(r);
                                    posRules.put(ps, r);
                                    ruleTag = false;
                                }
                                if (syllableTag) {
                                    syllablePatternList = new String(ch, start, length);
                                    syllableTag = false;
                                }
                                if (dictionaryEntryTag) {
                                    wordCount++;
                                    String coded = new String(ch, start, length);
                                    String entry = rwStringConverter.convertFrom64(coded);
                                    System.out.println(entry);
                                    RwDictionaryEntry rwe = new RwDictionaryEntry();
                                    rwe.setDefinition(entry.substring(0, entry.indexOf(":")));
                                    String[] e = (entry.substring(entry.indexOf(":") + 1)).split(", ");
                                    rwe.setMeaning(e[0].trim());
                                    rwe.setPos(e[1]);
                                    rwe.setRoot(e[2]);
                                    rwe.setSyllableCount(e[3]);
                                    String[] breaks=rwStringConverter.convertFromHex(e[4]).replace("[", "").replace("]", "").split(",");
                                    for(int b = 0; b < breaks.length; b++){
                                        rwe.setSyllableBreak(Integer.parseInt(breaks[b].trim()));
                                    }
                                    rwe.setWrittenForm(e[5]);
                                    //System.out.println(rwStringConverter.convertTo64(e[5]));
                                    rwe.setPtTag(e[6]);
                                    rwe.setFrequency(Integer.parseInt(e[7]));
                                    rwe.setTransliteration(e[8]);
                                    dictionary.addEntry(rwe);
                                    dictionaryEntryTag = false;
                                    //System.out.println(rwe);
                                }
                                if (numberOfLettersTag) {
                                    writingSystem.put("NumberOfLetters", new String(ch, start, length));
                                    numberOfLettersTag = false;
                                }
                                if (capRuleTag) {
                                    writingSystem.put("CapRule", new String(ch, start, length));
                                    capRuleTag = false;
                                }
                                if (phonemesTag){
                                    writingSystem.put("Phonemes", phnms);
                                    phonemesTag = false;
                                }

                                if(pkey){
                                    String coded = new String(ch, start, length);
                                    //key = ((char)Integer.parseInt(coded,16))+"";
                                    key = rwStringConverter.convertFrom64(coded);
                                    pkey = false;
                                }
                                if(pvalue){
                                    String coded = new String(ch, start, length);
                                    value = rwStringConverter.convertFromHex(coded);
                                    System.out.println(value + " for " + key);
                                    phnms.put(key, value);
                                    pvalue = false;
                                }

                                if (fontTag) {
                                    String f = new String(ch, start, length);
                                    writingSystem.put("Font", f);
                                    fontTag = false;
                                }

                                if (fontTypeTag) {
                                    String f = new String(ch, start, length);
                                    writingSystem.put("FontType", f);
                                    fontTypeTag = false;
                                }

                                if (systemTag) {
                                    String syst = new String(ch, start, length);
                                    writingSystem.put("System",syst);
                                    systemTag = false;
                                }

                                if (numberGlyphsTag){
                                    writingSystem.put("GlyphsPerLetter", new String(ch, start, length));
                                    numberGlyphsTag = false;
                                }

                                if (numberGraphemesTag){
                                    writingSystem.put("GraphemesPerGlyph", new String(ch, start, length));
                                    numberGraphemesTag = false;
                                }
                                if (punctTag){
                                    String punct = new String(ch, start, length);
                                    HashMap punctHash = new HashMap();
                                    for(String keyValue : punct.split(" *, *")){
                                        String[] pairs = keyValue.split(" *e *", 2);
                                        punctHash.put(rwStringConverter.convertFromHex(pairs[0]), pairs.length == 1 ? "" : rwStringConverter.convertFromHex(pairs[1]));
                                    }
                                    writingSystem.put("Punctuation", punctHash);
                                    System.out.println(writingSystem+"");
                                    punctTag = false;
                                }
                                if(glyph1Tag){
                                    HashMap gum = ((HashMap)writingSystem.get("GlyphUseMap"));
                                    gum.put("Glyph_1", new String(ch, start, length));
                                    writingSystem.put("GlyphUseMap", gum);
                                    glyph1Tag = false;
                                }
                                if(glyph2Tag){
                                    HashMap gum = ((HashMap)writingSystem.get("GlyphUseMap"));
                                    gum.put("Glyph_2", new String(ch, start, length));
                                    writingSystem.put("GlyphUseMap", gum);
                                    glyph2Tag = false;
                                }
                                if(glyph3Tag){
                                    HashMap gum = ((HashMap)writingSystem.get("GlyphUseMap"));
                                    gum.put("Glyph_3", new String(ch, start, length));
                                    writingSystem.put("GlyphUseMap", gum);
                                    glyph3Tag = false;
                                }
                                if(glyph4Tag){
                                    HashMap gum = ((HashMap)writingSystem.get("GlyphUseMap"));
                                    gum.put("Glyph_4", new String(ch, start, length));
                                    writingSystem.put("GlyphUseMap", gum);
                                    glyph4Tag = false;
                                }
                                if(glyphUseTag){

                                }
                            }
                            public void endDocument() {
                                System.out.println("Whoopie!");
                            }
                        };
                        saxParser.parse(jfc.getSelectedFile(), handler);

                    } catch (Throwable err) {
                        System.out.println(err.getMessage());
                        err.printStackTrace();
                    }
                    pgp.quit();
                    updateTable();
                    return 0;
                }
            };
            t.execute();
        }
    }//GEN-LAST:event_loadItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        try {
            String fileName = projectName;
            if (!fileName.endsWith(".xml")) {
                fileName += ".xml";
            }
            PrintWriter out = new PrintWriter(new File(fileName));
            StreamResult streamResult = new StreamResult(out);
            SAXTransformerFactory tf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
            TransformerHandler hd = tf.newTransformerHandler();
            Transformer serializer = hd.getTransformer();
            serializer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            serializer.setOutputProperty(OutputKeys.INDENT, "Yes");
            serializer.setOutputProperty(OutputKeys.STANDALONE, "Yes");
            hd.setResult(streamResult);
            hd.startDocument();
            AttributesImpl atts = new AttributesImpl();
            hd.startElement("", "", "Project", atts);
            hd.startElement("", "", "Vowels", atts);
            String daVowels = "";
            for (int a = 0; a < vowels.size(); a++) {
                String uc = "";
                String ub = "";
                for (int b =0; b < ((String)vowels.elementAt(a)).length(); b ++){
                    uc = Integer.toHexString((int)Character.codePointAt((CharSequence)vowels.elementAt(a),b));
                    if(ub.length()>0){
                        ub += " ";
                    }
                    ub += uc;
                }
                daVowels += ub;
                if (a < vowels.size() - 1) {
                    daVowels += ",";
                }
            }
            hd.startCDATA();
            hd.characters(daVowels.toCharArray(), 0, daVowels.length());
            hd.endCDATA();
            hd.endElement("", "", "Vowels");
            hd.startElement("", "", "Consonants", atts);
            String cnsnts = "";
            for (int a = 0; a < consonants.size(); a++) {
                String uc = "";
                String ub = "";
                for (int b =0; b < ((String)consonants.elementAt(a)).length(); b ++){
                    uc = Integer.toHexString((int)Character.codePointAt((CharSequence)consonants.elementAt(a),b));
                    if(ub.length()>0){
                        ub += " ";
                    }
                    ub += uc;
                }
                cnsnts += ub;
                if (a < consonants.size() - 1) {
                    cnsnts += ",";
                }
            }
            hd.startCDATA();
            hd.characters(cnsnts.toCharArray(), 0, cnsnts.length());
            hd.endCDATA();
            hd.endElement("", "", "Consonants");

            hd.startElement("", "", "Syllables", atts);
            hd.startCDATA();
            hd.characters(syllablePatternList.toCharArray(), 0, syllablePatternList.length());
            hd.endCDATA();
            hd.endElement("", "", "Syllables");
            hd.startElement("", "", "Rules", atts);
            String[] rs = {"Adjective",
                "Adverb",
                "Article",
                "Comp Adjective",
                "Comp Adverb",
                "Conjunction",
                "Determiner",
                "Interjection",
                "List",
                "Modal",
                "Noun",
                "Noun Plural",
                "Noun Plural Proper",
                "Noun Proper",
                "Number",
                "Particle",
                "Possesive",
                "Pos Pronoun",
                "Predeterminer",
                "Preposition",
                "Pers Pronoun",
                "Pronoun",
                "Super Adjective",
                "Super Adverb",
                "Symbol",
                "There",
                "To",
                "Verb",
                "Verb 3 pers",
                "Verb non 3 pers",
                "Verb Past",
                "Verb Past Part",
                "Verb Gerund",
                "Wh Adverb",
                "Wh Determiner",
                "Wh Pronoun",
                "Pos Wh Pronoun"};
            for (int a = 0; a < 37; a++) {
                hd.startElement("", "", "Rule", atts);
                System.out.println("Starting element Rule: " + rs[a]);
                String s = rs[a] + ": " + posRules.get(rs[a]);
                hd.startCDATA();
                hd.characters(s.toCharArray(), 0, s.length());
                hd.endCDATA();
                hd.endElement("", "", "Rule");
            }
            hd.endElement("", "", "Rules");
            hd.startElement("", "", "WritingSystem", atts);
            hd.startElement("", "", "System", atts);
            String s=(String)writingSystem.get("System");
            hd.characters(s.toCharArray(), 0, s.length());
            hd.endElement("", "", "System");
            hd.startElement("", "", "FontType", atts);
            String ft = (String)writingSystem.get("FontType");
            hd.characters(ft.toCharArray(), 0, ft.length());
            hd.endElement("", "", "FontType");
            hd.startElement("", "", "Font", atts);
            ft = (String)writingSystem.get("Font");
            hd.characters(ft.toCharArray(), 0, ft.length());
            hd.endElement("", "", "Font");
            if(!s.equals("System")){
                hd.startElement("", "", "NumberOfLetters", atts);
                String nl = writingSystem.get("NumberOfLetters")+"";
                hd.characters(nl.toCharArray(), 0, nl.length());
                hd.endElement("", "", "NumberOfLetters");
                String nc="0";
                String sq = (String)writingSystem.get("System");
                if(sq.equals("Alphabet") || sq.equals("Abjad")){
                    hd.startElement("", "", "GlyphsPerLetter", atts);
                    nc = writingSystem.get("GlyphsPerLetter")+"";
                    hd.characters(nc.toCharArray(), 0, nc.length());
                    hd.endElement("", "", "GlyphsPerLetter");
                }
                if(sq.equals("Multigraphic")){
                    hd.startElement("", "", "GraphemesPerGlyph", atts);
                    nc = writingSystem.get("GraphemesPerGlyph")+"";
                    hd.characters(nc.toCharArray(), 0, nc.length());
                    hd.endElement("", "", "GraphemesPerGlyph");
                }
                if(((HashMap)writingSystem).containsKey("GlyphUseMap")){
                    hd.startElement("", "", "GlyphUseMap", atts);
                    HashMap gum = (HashMap)writingSystem.get("GlyphUseMap");
                    for(int numGlyphs = 0; numGlyphs < Integer.parseInt(nc); numGlyphs++){
                        hd.startElement("", "", "Glyph_"+(numGlyphs + 1), atts);
                        String gp = (String)gum.get("Glyph_"+(numGlyphs +1));
                        hd.characters(gp.toCharArray(), 0, gp.length());
                        hd.endElement("", "", "Glyph_"+(numGlyphs +1));
                    }
                    hd.endElement("", "", "GlyphUseMap");
                }
                if (s.equals("Alphabet")){
                    hd.startElement("", "", "CapRule", atts);
                    String cr = writingSystem.get("CapRule")+"";
                    hd.characters(cr.toCharArray(), 0, cr.length());
                    hd.endElement("", "", "CapRule");
                }
                if(((HashMap)writingSystem).containsKey("Phonemes")){
                    HashMap phns = (HashMap)writingSystem.get("Phonemes");
                    hd.startElement("", "", "Phonemes", atts);
                    Object[] keys = phns.keySet().toArray();
                    for(int phn = 0; phn < keys.length; phn ++){
                        hd.startElement("", "", "Phoneme", atts);
                        hd.startElement("", "", "pkey", atts);
                        String hky = rwStringConverter.convertTo64(keys[phn]+"");
                        hd.startCDATA();
                        hd.characters(hky.toCharArray(), 0, hky.length());
                        hd.endCDATA();
                        hd.endElement("", "", "pkey");
                        hd.startElement("", "", "pvalue", atts);
                        String phone = phns.get(keys[phn]).toString();
                        byte[] bs = phone.getBytes("UTF-8");
                        String hexes = "0123456789ABCDEF";
                        StringBuilder sb = new StringBuilder(2 * bs.length);
                        for( byte b:bs ){
                            sb.append(hexes.charAt((b & 0xF0) >> 4)).append(hexes.charAt((b & 0x0F)));
                        }
                        hd.startCDATA();
                        hd.characters(sb.toString().toCharArray(), 0, sb.toString().length());
                        hd.endCDATA();
                        hd.endElement("", "", "pvalue");
                        hd.endElement("", "", "Phoneme");
                    }
                    hd.endElement("", "", "Phonemes");
                }
            }
            if (s.equals("Abjad")){
                hd.startElement("", "", "VowelsShown", atts);
                String vs = writingSystem.get("VowelsShown")+"";
                hd.characters(vs.toCharArray(), 0, vs.length());
                hd.endElement("", "", "VowelsShown");
            }
            if (s.equals("Abugida")){

            }
            if (s.equals("Syllabary")){
                hd.startElement("", "", "NumberOfSyllables", atts);
                String ns = writingSystem.get("NumberOfSyllables")+"";
                hd.characters(ns.toCharArray(), 0, ns.length());
                hd.endElement("", "", "NumberOfSyllables");
                hd.startElement("", "", "Syllables", atts);
                HashMap sylbls = (HashMap)writingSystem.get("Syllables");
                Object[] keys = sylbls.keySet().toArray();
                for(int sc=0; sc < (Integer.parseInt(ns) ); sc ++){
                    hd.startElement("", "", "Syllable", atts);
                    hd.startElement("", "", "skey", atts);
                    String ky=keys[sc].toString();
                    System.out.println(ky + " " + sc);
                    hd.characters(ky.toCharArray(), 0, ky.length());
                    hd.endElement("", "", "skey");
                    hd.startElement("", "", "svalue", atts);
                    String syllable = sylbls.get(ky).toString();
                    byte[] bs = syllable.getBytes("UTF-8");
                    String hexes = "0123456789ABCDEF";
                    StringBuilder sb = new StringBuilder(2 * bs.length);
                    for( byte b:bs ){
                        sb.append(hexes.charAt((b & 0xF0) >> 4)).append(hexes.charAt((b & 0x0F)));
                    }
                    //String vl = sylbls.get(ky).toString();
                    hd.characters(sb.toString().toCharArray(), 0, sb.toString().length());
                    hd.endElement("", "", "svalue");
                    hd.endElement("", "", "Syllable");
                }
                hd.endElement("", "", "Syllables");
            }
            if (s.equals("Multigraphic")){

            }
            hd.startElement("", "", "Punctuation", atts);
            HashMap punct = (HashMap)writingSystem.get("Punctuation");
            String pm="";
            for(Object key : punct.keySet()){
                pm += rwStringConverter.convertToHex(key+"") + "e" +
                        rwStringConverter.convertToHex(punct.get(key)+"") + ", ";
            }
            pm = pm.substring(0, pm.length() - 2);
            //pm = rwStringConverter.convertTo64(pm);
            hd.startCDATA();
            hd.characters(pm.toCharArray(), 0, pm.length());
            hd.endCDATA();
            hd.endElement("", "", "Punctuation");
            hd.endElement("", "", "WritingSystem");
            hd.startElement("", "", "Dictionary", atts);
            for (int a = 0; a < dictionary.size(); a++) {
                hd.startElement("", "", "DictionaryEntry", atts);
                hd.startCDATA();
                char[] ch = rwStringConverter.convertTo64(dictionary.getEntryAt(a).toString()).toCharArray();
                //System.out.println(rwStringConverter.convertTo64(dictionary.getEntryAt(a).getWrittenForm()));
                hd.characters(ch, 0, ch.length);
                hd.endCDATA();
                hd.endElement("", "", "DictionaryEntry");
            }
            hd.endElement("", "", "Dictionary");
            hd.endElement("", "", "Project");
            hd.endDocument();
            out.close();
        } catch (Exception ex) {
            System.out.println(ex);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        JFileChooser jfc = new JFileChooser(".");
        int chosenOption = jfc.showSaveDialog(this);
        if (chosenOption != JFileChooser.CANCEL_OPTION) {
            projectName = jfc.getSelectedFile().getPath();
            if (projectName.endsWith(".xml")) {
                projectName = projectName.substring(0, projectName.length() - 4);
                setTitle("Random Language Generator " + jfc.getSelectedFile().getName());
                saveItemActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_saveAsItemActionPerformed

    private void loadDefinitionsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDefinitionsItemActionPerformed
        loadDefinitionsButtonActionPerformed(evt);
    }//GEN-LAST:event_loadDefinitionsItemActionPerformed

    private void saveDefinitionsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDefinitionsItemActionPerformed
        try {
            PrintWriter out = new PrintWriter(new File(definitionsName + ".csv"));
            for (int a = 0; a < dictionary.size(); a++) {
                out.println(dictionary.getEntryAt(a).toDefString());
                if(dictionary.getEntryAt(a).getDefinition().length() > 15){
                    System.out.println(dictionary.getEntryAt(a).getDefinition());
                }
            }
            out.close();
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_saveDefinitionsItemActionPerformed

    private void saveDefinitionsAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDefinitionsAsItemActionPerformed
        JFileChooser jfc = new JFileChooser(".");
        int chosenOption = jfc.showSaveDialog(this);
        if (chosenOption != JFileChooser.CANCEL_OPTION) {
            File defs = jfc.getSelectedFile();
            definitionsName = defs.getPath();
            if (definitionsName.endsWith(".csv")) {
                definitionsName = definitionsName.substring(0,
                        definitionsName.length() - 4);
            }
            System.out.println(definitionsName);
            saveDefinitionsItemActionPerformed(evt);
        }
    }//GEN-LAST:event_saveDefinitionsAsItemActionPerformed

    private void undoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_undoItemActionPerformed

    private void redoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redoItemActionPerformed

    private void cutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cutItemActionPerformed

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_copyItemActionPerformed

    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pasteItemActionPerformed

    private void findItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findItemActionPerformed
        String def = JOptionPane.showInputDialog(this, "Find What");
        if (!def.isEmpty()) {
            RwDictionaryEntry rwd = dictionary.findFromDefinition(def);
            if (dictionary.indexOf(rwd) > 0) {
                wordTable.scrollRectToVisible(wordTable.getCellRect(dictionary.indexOf(rwd), 0, true));
                wordTable.setRowSelectionInterval(dictionary.indexOf(rwd), dictionary.indexOf(rwd));
            } else {
                JOptionPane.showMessageDialog(this, "Can't find " + def, "Oops!",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_findItemActionPerformed

    private void replaceItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_replaceItemActionPerformed

    private void writingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writingItemActionPerformed
        RwWritingSystemChooser rwwc = new RwWritingSystemChooser(this, "Set Up Writing System", true,
                vowels, consonants, writingSystem);
        rwwc.setVisible(true);
        if (rwwc.getChosenOption() == rwwc.OK_OPTION) {
            writingSystem = rwwc.getWritingSystem();
            System.out.println(writingSystem);
        }
        rwwc.dispose();
    }//GEN-LAST:event_writingItemActionPerformed

    private void generateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateItemActionPerformed
        generateWordsButtonActionPerformed(evt);
    }//GEN-LAST:event_generateItemActionPerformed

    private void helpContentsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpContentsItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpContentsItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        rwAboutDialog abt = new rwAboutDialog((java.awt.Frame)this,true);
        abt.setVisible(true);
    }//GEN-LAST:event_aboutItemActionPerformed

    private void newItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemActionPerformed
        projectName = JOptionPane.showInputDialog(this, "Project Name", "Untitled");
        setTitle("Random Language Generator - " + projectName);
        vowelsItemActionPerformed(evt);
        consonantItemActionPerformed(evt);
        syllableItemActionPerformed(evt);
        loadDefinitionsButtonActionPerformed(evt);
    }//GEN-LAST:event_newItemActionPerformed

    private void rulesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesItemActionPerformed
        RwPosRulesDialog prd = new RwPosRulesDialog(this, true);
        Vector results = prd.showDialog(this, true, posRules);
        Boolean cancelled = (Boolean) ((Vector) results.elementAt(results.size() - 1)).elementAt(1);
        if (!cancelled.booleanValue()) {
            for (int a = 0; a < results.size(); a++) {
                Vector rule = (Vector) results.elementAt(a);
                Vector daRule = new Vector();
                daRule.addElement(rule.elementAt(1));
                daRule.addElement(rule.elementAt(2));
                daRule.addElement(rule.elementAt(3));
                daRule.addElement(rule.elementAt(4));
                daRule.addElement(rule.elementAt(5));
                posRules.put((String) rule.elementAt(0), daRule);
                System.out.println(daRule);
            }
        }
    }//GEN-LAST:event_rulesItemActionPerformed

    private void maxSyllablesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxSyllablesItemActionPerformed
        rwSyllableTreatmentDialog std = new rwSyllableTreatmentDialog(maximumSyllables, syllabicEfficiency);
        int result = JOptionPane.showConfirmDialog(this, std, "Enter Number of Syllables", JOptionPane.OK_CANCEL_OPTION);
        if(result != JOptionPane.CANCEL_OPTION){
            maximumSyllables = Integer.parseInt(std.maximumSyllablesSpinner.getValue()+"");
            syllabicEfficiency = std.syllabicEfficiencyCheck.isSelected();
        }
        /*maximumSyllables = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Max Syllables",
                maximumSyllables));*/
    }//GEN-LAST:event_maxSyllablesItemActionPerformed

    private void translateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateItemActionPerformed
        RwTranslationDialog rwt = new RwTranslationDialog(this, false);
        rwt.setVisible(true);
    }//GEN-LAST:event_translateItemActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        final RwProgressPane pgp = new RwProgressPane(this, false, true);
        pgp.setVisible(true);
        SwingWorker t = new SwingWorker() {
            public Integer doInBackground() {
                updateTable();
                pgp.quit();
                return 0;
            }
        };
        t.execute();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void editMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemActionPerformed
        if(wordTable.getSelectedRow()>=0){
            rwEditEntryDialog eed = new rwEditEntryDialog(this, true);
            RwDictionaryEntry entry = (RwDictionaryEntry)dictionary.getEntryAt(wordTable.getSelectedRow());
            eed.posField.setText(entry.getPos());
            eed.definitionField.setText(entry.getDefinition());
            eed.rootField.setText(entry.getRoot());
            eed.frequencyField.setText(entry.getFrequency()+"");
            eed.syllableCountField.setText(entry.getSyllableCount()+"");
            eed.pronunciationField.setText(entry.getMeaning());
            eed.writtenFormField.setText(entry.getWrittenForm());
            eed.transliterationField.setText(entry.getTransliteration());
            eed.ptTagField.setText(entry.getPtTag());
            //eed.syllableBreaksField.setText(entry.getSyllableBreaks());
            eed.setVisible(true);
        } else {
            JOptionPane.showConfirmDialog(this, "Please select an entry to edit!", "Oops!", JOptionPane.PLAIN_MESSAGE,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RandomWords().setVisible(true);
            }
        });
    }

    public static String strip(String raw) {
        String stripped = raw;
        if (stripped.startsWith("\"")) {
            stripped = stripped.substring(1);
        }
        if (stripped.endsWith("\"")) {
            stripped = stripped.substring(0, stripped.length() - 1);
        }
        return stripped;
    }

    public void updateTable() {
        dtm.setRowCount(0);
        dtm.setRowCount(wordCount);
        try {
            tcr.setSystemFont(writingSystem.get("Font") + "");
        } catch (NullPointerException ex) {
            tcr.setSystemFont("LCS-ConstructorII");
        }
        //tcr.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        for (int a = 0; a < wordCount; a++) {
            RwDictionaryEntry rwe = dictionary.getEntryAt(a);
            rwe.setTransliteration(transliterateWord(rwe.getDefinition(),rwe.getPos()));
            dtm.setValueAt(a + "", a, 0);
            dtm.setValueAt(rwe.getPos(), a, 1);
            dtm.setValueAt(rwe.getDefinition(), a, 2);
            dtm.setValueAt(rwe.getMeaning(), a, 3);
            if (writingSystem != null) {
                if (writingSystem.get("System").equals("Alphabet")) {
                    HashMap phonemes = (HashMap) writingSystem.get("Phonemes");
                    Object[] keys = phonemes.keySet().toArray();
                    java.util.Arrays.sort(keys, new LengthReverseComparator());
                    HashMap glyphUseMap = (HashMap) writingSystem.get("GlyphUseMap");
                    int glyphsPerLetter = Integer.parseInt(writingSystem.get("GlyphsPerLetter") + "");
                    int ucaseVal = 0;
                    int lcaseVal = 0;
                    String capRule = (String) writingSystem.get("CapRule");
                    if (glyphUseMap.containsValue("Upper")) {
                        for (int q = 0; q < glyphsPerLetter; q++) {
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Upper")) {
                                ucaseVal = q;
                            }
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Lower")) {
                                lcaseVal = q;
                            }
                        }
                    }
                    int initVal = 0;
                    int medVal = 0;
                    int finVal = 0;
                    int isoVal = 0;
                    if (glyphUseMap.containsValue("Initial")) {
                        for (int q = 0; q < glyphsPerLetter; q++) {
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Initial")) {
                                initVal = q;
                            }
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Medial")) {
                                medVal = q;
                            }
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Final")) {
                                finVal = q;
                            }
                            if (glyphsPerLetter > 3
                                    && glyphUseMap.get("Glyph_" + (q + 1)).equals("Isolated")) {
                                isoVal = q;
                            }
                        }
                    }
                    int pos = 0;
                    String m = rwe.getMeaning();
                    String ws = "";
                    while (pos < m.length()) {
                        for (int q = 0; q < keys.length; q++) {
                            String key = (String) keys[q];
                            if (pos + key.length() > m.length()) {
                                continue;
                            }
                            if (m.substring(pos, (pos + key.length())).equals(key)) {
                                pos += key.length();
                                String[] glyphs = (phonemes.get(key) + "").split(" ");
                                if (glyphUseMap.containsValue("Upper")) {
                                    if (capRule.equals("Word")) {
                                        if (ws.length() == 0) {
                                            ws += glyphs[ucaseVal];
                                        } else {
                                            ws += glyphs[lcaseVal];
                                        }
                                    } else if (capRule.equals("Nouns")) {
                                        if (ws.length() == 0 && rwe.getPos().equals("Noun")) {
                                            ws += glyphs[ucaseVal];
                                        } else {
                                            ws += glyphs[lcaseVal];
                                        }
                                    } else {
                                        ws += glyphs[lcaseVal];
                                    }
                                }
                                if (glyphUseMap.containsValue("Initial")) {
                                    if (ws.length() == 0) {
                                        ws += glyphs[initVal];
                                    } else if (pos == (m.length())) {
                                        ws += glyphs[finVal];
                                    } else {
                                        ws += glyphs[medVal];
                                    }
                                }
                                break;
                            }
                        }
                    }
                    dtm.setValueAt(ws, a, 4);
                    rwe.setWrittenForm(ws);
                    //System.out.println(rwStringConverter.convertTo64(rwe.getWrittenForm()));
                }
                if (writingSystem.get("System").equals("Abjad")) {
                    HashMap phonemes = (HashMap) writingSystem.get("Phonemes");
                    Object[] keys = phonemes.keySet().toArray();
                    java.util.Arrays.sort(keys, new LengthReverseComparator());
                    HashMap glyphUseMap = (HashMap) writingSystem.get("GlyphUseMap");
                    //Count Consonants
                    // we only need to know that there is one or more than one
                    // so we stop checking as soon as we find what we need.
                    Object[] cons = consonants.toArray();
                    java.util.Arrays.sort(cons, new LengthReverseComparator());
                    int consCount=0;
                    String word = rwe.getMeaning();
                    ArrayList wc = new ArrayList(50);
                    for(int qw=0;qw<50;qw++){
                        wc.add(null);
                    }
                    for(int cns = 0; cns < cons.length; cns++){
                        while (word.contains((String)cons[cns])) {
                            //System.out.println(word);
                            wc.set(word.indexOf((String)cons[cns]),cons[cns]);
                            word = word.replaceFirst((String)cons[cns], "****".substring(0,((String)cons[cns]).length()));
                            consCount ++;
                        }
                    }
                    // now let's remove the vowels
                    word = rwe.getMeaning();
                    wc.removeAll(Collections.singleton(null));
                    String lcons = (String)wc.get(wc.size()-1);
                    //System.out.println(lcons);
                    int wl = word.lastIndexOf(lcons);
                    Object[] vwls = vowels.toArray();
                    java.util.Arrays.sort(vwls, new LengthReverseComparator());
                    for(int zq = 0; zq < vwls.length; zq++){
                        while (word.contains((String)vwls[zq])){
                            word = word.replaceFirst((String)vwls[zq],"");
                        }
                    }
                    int glyphsPerLetter = Integer.parseInt(writingSystem.get("GlyphsPerLetter") + "");
                    int ucaseVal = 0;
                    int lcaseVal = 0;
                    String capRule = (String) writingSystem.get("CapRule");
                    if (glyphUseMap.containsValue("Upper")) {
                        for (int q = 0; q < glyphsPerLetter; q++) {
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Upper")) {
                                ucaseVal = q;
                            }
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Lower")) {
                                lcaseVal = q;
                            }
                        }
                    }
                    int initVal = 0;
                    int medVal = 0;
                    int finVal = 0;
                    int isoVal = 0;
                    if (glyphUseMap.containsValue("Initial")) {
                        for (int q = 0; q < glyphsPerLetter; q++) {
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Initial")) {
                                initVal = q;
                            }
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Medial")) {
                                medVal = q;
                            }
                            if (glyphUseMap.get("Glyph_" + (q + 1)).equals("Final")) {
                                finVal = q;
                            }
                            if (glyphsPerLetter > 3
                                    && glyphUseMap.get("Glyph_" + (q + 1)).equals("Isolated")) {
                                isoVal = q;
                            }
                        }
                    }
                    int pos = 0;
                    String m = rwe.getMeaning();
                    if(!Boolean.parseBoolean(writingSystem.get("VowelsShown")+"")) {
                        m = word;
                    }
                    StringBuffer ws = new StringBuffer("");
                    while (pos < m.length()) {
                        for (int q = 0; q < keys.length; q++) {
                            String key = (String) keys[q];
                            if (pos + key.length() > m.length()) {
                                continue;
                            }
                            if (m.substring(pos, (pos + key.length())).equals(key)) {
                                pos += key.length();
                                String[] glyphs = (phonemes.get(key) + "").split(" ");
                                if (glyphUseMap.containsValue("Upper")) {
                                    if (capRule.equals("Word")) {
                                        if (ws.length() == 0) {
                                            ws.append(glyphs[ucaseVal]);
                                        } else {
                                            ws.append(glyphs[lcaseVal]);
                                        }
                                    } else if (capRule.equals("Nouns")) {
                                        if (ws.length() == 0 && rwe.getPos().equals("Noun")) {
                                            ws.append(glyphs[ucaseVal]);
                                        } else {
                                            ws.append(glyphs[lcaseVal]);
                                        }
                                    } else {
                                        ws.append(glyphs[lcaseVal]);
                                    }
                                }
                                if (glyphUseMap.containsValue("Initial")) {
                                    if (ws.length() == 0 && consCount == 1) {
                                        ws.append(glyphs[isoVal]);
                                    } else if (ws.length() == 0) {
                                        ws.append(glyphs[initVal]);
                                    } else if ((pos - 1) == wl) {
                                        ws.append(glyphs[finVal]);
                                    } else {
                                        ws.append(glyphs[medVal]);
                                    }
                                }
                                break;
                            }
                        }
                        //System.out.println();
                    }
                    dtm.setValueAt(ws.toString(), a, 4);
                    rwe.setWrittenForm(ws.toString());
                }
                if (writingSystem.get("System").equals("Abugida")) {
                    HashMap phonemes = (HashMap) writingSystem.get("Phonemes");
                    Object[] keys = phonemes.keySet().toArray();
                    java.util.Arrays.sort(keys, new LengthReverseComparator());
                    int pos = 0;
                    String m = rwe.getMeaning();
                    String ws = "";
                    while (pos < m.length()) {
                        for (int q = 0; q < keys.length; q++) {
                            String key = (String) keys[q];
                            if (pos + key.length() > m.length()) {
                                continue;
                            }
                            if (m.substring(pos, (pos + key.length())).equals(key)) {
                                pos += key.length();
                                String glyph = phonemes.get(key) + "";
                                ws += glyph.trim();
                            }
                        }
                    }
                    dtm.setValueAt(ws, a, 4);
                    rwe.setWrittenForm(ws);
                }
                if (writingSystem.get("System").equals("Syllabary")) {
                    HashMap syllables = (HashMap) writingSystem.get("Syllables");
                    Object[] keys = syllables.keySet().toArray();
                    java.util.Arrays.sort(keys, new LengthReverseComparator());
                    int pos = 0;
                    String m = rwe.getMeaning();
                    String ws = "";
                    while (pos < m.length()) {
                        for (int q = 0; q < keys.length; q++) {
                            String key = (String) keys[q];
                            if (pos + key.length() > m.length()) {
                                continue;
                            }
                            if (m.substring(pos, (pos + key.length())).equals(key)) {
                                pos += key.length();
                                String glyph = syllables.get(key) + "";
                                ws += glyph;
                            }
                        }
                    }
                    dtm.setValueAt(ws, a, 4);
                    rwe.setWrittenForm(ws);
                }
                if (writingSystem.get("System").equals("Multigraphic")){
                    HashMap phonemes = (HashMap)writingSystem.get("Phonemes");
                    Object[] keys = phonemes.keySet().toArray();
                    java.util.Arrays.sort(keys, new LengthReverseComparator());
                    int pos = 0;
                    int maxChar = Integer.parseInt(writingSystem.get("GraphemesPerGlyph").toString());
                    String m = rwe.getMeaning().trim();
                    String ws = "";
                    int multiCount = 0;
                    while (pos < m.length()) {
                        for (int q = 0; q < keys.length; q++) {
                            String key = (String) keys[q];
                            if (pos + key.length() > m.length()) {
                                continue;
                            }
                            if (m.substring(pos, (pos + key.length())).equals(key)) {
                                pos += key.length();
                                String[] glyphs = (phonemes.get(key) + "").split(" ");
                                ws += glyphs[multiCount].trim();
                                multiCount += 1;
                                if (multiCount >= maxChar){
                                    multiCount = 0;
                                }
                            }
                        }
                    }
                    if ((ws.codePointCount(0, ws.length()) % maxChar) > 0 && phonemes.keySet().contains("Enders")){
                        String[] s = (phonemes.get("Enders")+ "").split(" ");
                        ws += s[(ws.codePointCount(0, ws.length()) % maxChar)];
                    }
                    dtm.setValueAt(ws, a, 4);
                    rwe.setWrittenForm(ws);
                }
            }
            //System.out.println(rwe.toString());
        }
    }

    public String transliterateWord(String original, String ps){
        HashMap phonemes = (HashMap)writingSystem.get("Phonemes");
        HashMap glyphUses = (HashMap)writingSystem.get("GlyphUseMap");
        int glyphsPerLetter = 0;
        if(writingSystem.containsKey("GlyphsPerLetter")){
            glyphsPerLetter = Integer.parseInt(writingSystem.get("GlyphsPerLetter")+"");
        }
        StringBuilder trans = new StringBuilder();
        if(writingSystem.get("System") == "Alphabet"){
            int ucaseVal = 0;
            int lcaseVal = 0;
            int initVal = 0;
            int medVal = 0;
            int finVal = 0;
            int isoVal = 0;
            for (int q = 0; q < glyphsPerLetter; q++) {
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Upper")) {
                    ucaseVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Lower")) {
                    lcaseVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Initial")) {
                    initVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Medial")) {
                    medVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Final")) {
                    finVal = q;
                }
                if (glyphsPerLetter > 3
                        && glyphUses.get("Glyph_" + (q + 1)).equals("Isolated")) {
                    isoVal = q;
                }
            }
            int pos = 0;
            String capRule = (String) writingSystem.get("CapRule");
            Object[] keys = phonemes.keySet().toArray();
            java.util.Arrays.sort(keys, new LengthReverseComparator());
            String m = original;
                String ws = "";
                while (pos < m.length()) {
                    for (int q = 0; q < keys.length; q++) {
                        String key = (String) keys[q];
                        if (pos + key.length() > m.length()) {
                            continue;
                        }
                        if (m.substring(pos, (pos + key.length())).equals(key)) {
                            pos += key.length();
                            String[] glyphs = (phonemes.get(key) + "").split(" ");
                            if (glyphUses.containsValue("Upper")) {
                                if (capRule.equals("Word")) {
                                     if (ws.length() == 0) {
                                        ws += glyphs[ucaseVal];
                                    } else {
                                        ws += glyphs[lcaseVal];
                                    }
                                } else if (capRule.equals("Nouns")) {
                                    if (ws.length() == 0 && ps.equals("Noun")) {
                                        ws += glyphs[ucaseVal];
                                    } else {
                                        ws += glyphs[lcaseVal];
                                    }
                                } else {
                                    ws += glyphs[lcaseVal];
                                }
                            }
                            if (glyphUses.containsValue("Initial")) {
                                if (ws.length() == 0) {
                                    ws += glyphs[initVal];
                                } else if (pos == (m.length())) {
                                    ws += glyphs[finVal];
                                } else {
                                    ws += glyphs[medVal];
                                }
                            }
                            break;
                        }
                    }
                }
            trans.append(ws);
        }
        if (writingSystem.get("System") == "Abjad"){
            int ucaseVal = 0;
            int lcaseVal = 0;
            int initVal = 0;
            int medVal = 0;
            int finVal = 0;
            int isoVal = 0;
            for (int q = 0; q < glyphsPerLetter; q++) {
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Upper")) {
                    ucaseVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Lower")) {
                    lcaseVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Initial")) {
                    initVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Medial")) {
                    medVal = q;
                }
                if (glyphUses.get("Glyph_" + (q + 1)).equals("Final")) {
                    finVal = q;
                }
                if (glyphsPerLetter > 3
                        && glyphUses.get("Glyph_" + (q + 1)).equals("Isolated")) {
                    isoVal = q;
                }
            }
            int pos = 0;
            String capRule = (String) writingSystem.get("CapRule");
            Object[] keys = phonemes.keySet().toArray();
            java.util.Arrays.sort(keys, new LengthReverseComparator());
            String m = original;
                String ws = "";
                while (pos < m.length()) {
                    for (int q = 0; q < keys.length; q++) {
                        String key = (String) keys[q];
                        if (pos + key.length() > m.length()) {
                            continue;
                        }
                        if (m.substring(pos, (pos + key.length())).equals(key)) {
                            pos += key.length();
                            String[] glyphs = (phonemes.get(key) + "").split(" ");
                            if (glyphUses.containsValue("Upper")) {
                                if (capRule.equals("Word")) {
                                     if (ws.length() == 0) {
                                        ws += glyphs[ucaseVal];
                                    } else {
                                        ws += glyphs[lcaseVal];
                                    }
                                } else if (capRule.equals("Nouns")) {
                                    if (ws.length() == 0 && ps.equals("Noun")) {
                                        ws += glyphs[ucaseVal];
                                    } else {
                                        ws += glyphs[lcaseVal];
                                    }
                                } else {
                                    ws += glyphs[lcaseVal];
                                }
                            }
                            if (glyphUses.containsValue("Initial")) {
                                if (ws.length() == 0) {
                                    ws += glyphs[initVal];
                                } else if (pos == (m.length())) {
                                    ws += glyphs[finVal];
                                } else {
                                    ws += glyphs[medVal];
                                }
                            }
                            break;
                        }
                    }
                }
            trans.append(ws);
        }
        if(writingSystem.get("System") == "Abugida"){
            String vowelString = "aeiouy";
            String cons = "bcdfghjklmnpqrstvwxz";
            String nv = "";
            String vc = "";
            boolean vowelCarrierUsed = phonemes.containsKey("VowelCarrier");
            boolean nvu = phonemes.containsKey("NoVowel");
            if(vowelCarrierUsed){
                vc = (phonemes.get("VowelCarrier")+"").trim();
            }
            if(nvu){
                nv = (phonemes.get("NoVowel")+"").trim();
            }
            for(int a=0;a<original.length();a++){
                if(vowelString.contains(original.charAt(0)+"") && vowelCarrierUsed && a == 0){
                    trans.append(vc + phonemes.get(original.charAt(a)+""));
                } else if (a > 0 && vowelString.contains(original.charAt(a)+"")
                        && vowelString.contains(original.charAt(a - 1)+"")
                        && vowelCarrierUsed){
                    trans.append(vc+phonemes.get(original.charAt(a)+""));
                } else if (a < (original.length()-1) && cons.contains(original.charAt(a)+"")
                        && cons.contains(original.charAt(a + 1)+"")
                        && nvu){
                    trans.append(phonemes.get(original.charAt(a)+"") + nv);
                } else if(a == (original.length()-1) && cons.contains(original.charAt(a)+"")
                        && nvu){
                    trans.append(phonemes.get(original.charAt(a)+"") + nv);
                } else {
                    trans.append(phonemes.get(original.charAt(a)+"")+"");
                }
            }
        }
        if(writingSystem.get("System") == "Syllabary"){
            String vwls = vowels.toString().replaceAll(",", "");
            String cnsnts = consonants.toString().replaceAll(",", "");
            HashMap syllables = (HashMap)writingSystem.get("Syllables");
            original += "-";
            int position = 0;
            while (position < original.length()-1) {
                if (vwls.contains(original.charAt(position)+"")){
                    trans.append(syllables.get("NC"+original.charAt(position)));
                    position ++;
                } else if (cnsnts.contains(original.charAt(position)+"") && vwls.contains(original.charAt(position + 1)+"")) {
                    trans.append(syllables.get(original.charAt(position) + "" + original.charAt(position + 1)));
                    position += 2;
                } else {
                    trans.append(syllables.get(original.charAt(position) + "NV"));
                    position ++;
                }
            }
        }
        if(writingSystem.get("System") == "Multigraphic"){
            String g=writingSystem.get("GraphemesPerGlyph")+"";
            int gpg = Integer.parseInt(g);
            for(int a=0;a<original.length();a++){
                String[] lets=(phonemes.get(original.charAt(a)+"")+"").split(" ");
                trans.append(lets[a%gpg]);
            }
            if(phonemes.containsKey("Enders")){
                String[] enders=(phonemes.get("Enders")+"").split(" ");
                //System.out.println(enders + "");
                if(original.length() % gpg != 0){
                    trans.append(enders[original.codePointCount(0, original.length())%gpg]);
                }
            }
        }
        return trans.toString();
    }

    public RwDictionary getDictionary(){
        return dictionary;
    }

    public HashMap getWritingSystem() {
        return writingSystem;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenuItem consonantItem;
    private java.util.Vector consonants;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JMenuItem cutItem;
    private java.lang.String definitionsName;
    private rw.RwDictionary dictionary;
    private javax.swing.table.DefaultTableModel dtm;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findItem;
    private javax.swing.JMenuItem generateItem;
    private javax.swing.JButton generateWordsButton;
    private javax.swing.JMenuItem helpContentsItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem insertMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JButton loadDefinitionsButton;
    private javax.swing.JMenuItem loadDefinitionsItem;
    private javax.swing.JMenuItem loadItem;
    private javax.swing.JMenuItem maxSyllablesItem;
    private javax.swing.JMenuItem newItem;
    private javax.swing.JMenuItem pasteItem;
    private java.util.HashMap posRules;
    private javax.swing.JMenu projectMenu;
    private java.lang.String projectName;
    private javax.swing.JButton quitButton;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JMenuItem redoItem;
    private javax.swing.JButton refreshButton;
    private javax.swing.JMenuItem replaceItem;
    private javax.swing.JMenuItem rulesItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveDefinitionsAsItem;
    private javax.swing.JMenuItem saveDefinitionsItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem syllableItem;
    private java.lang.String syllablePattern;
    private java.lang.String syllablePatternList;
    private rw.RwCellRenderer tcr;
    private javax.swing.JMenuItem translateItem;
    private javax.swing.JMenuItem undoItem;
    private java.util.Vector vowels;
    private javax.swing.JMenuItem vowelsItem;
    private javax.swing.JScrollPane wordScroller;
    private javax.swing.JTable wordTable;
    private java.util.Vector words;
    private javax.swing.JMenuItem writingItem;
    // End of variables declaration//GEN-END:variables
    private int wordCount;
    private HashMap writingSystem = new HashMap();
    private boolean syllabicEfficiency = true;
}