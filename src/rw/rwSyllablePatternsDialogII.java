/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * rwSyllablePatternsDialogII.java
 *
 * Created on Nov 5, 2013, 10:37:34 AM
 */
package rw;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tedr
 */
public class rwSyllablePatternsDialogII extends javax.swing.JPanel {

    /** Creates new form rwSyllablePatternsDialogII */
    public rwSyllablePatternsDialogII() {
        initComponents();
    }


    /** Creates and pre loads form reSyllablePatternsDialogII
     *  param a space separated string of syllable patterns
     *  and the randomness method
     */
    public rwSyllablePatternsDialogII(String syllables){
        initComponents();
        ArrayList patterns = new ArrayList();
        patterns.addAll(Arrays.asList(syllables.split(" ")));
        numberPatternsSpinner.setValue(patterns.size()-1);
        DefaultTableModel dtm = (DefaultTableModel)patternsTable.getModel();
        dtm.setRowCount(patterns.size()-1);
        for(int a = 0; a < patterns.size()-1; a++){
            dtm.setValueAt(patterns.get(a), a, 0);
        }
        randomnessCombo.setSelectedIndex(Integer.parseInt(patterns.get(patterns.size()-1)+""));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        randomnessLabel = new javax.swing.JLabel();
        randomnessCombo = new javax.swing.JComboBox();
        numberPatternsLabel = new javax.swing.JLabel();
        numberPatternsSpinner = new javax.swing.JSpinner();
        patternsScroller = new javax.swing.JScrollPane();
        patternsTable = new javax.swing.JTable();

        setMaximumSize(new java.awt.Dimension(320, 200));
        setMinimumSize(new java.awt.Dimension(320, 200));
        setPreferredSize(new java.awt.Dimension(320, 200));
        setLayout(new java.awt.GridBagLayout());

        randomnessLabel.setText("Randomness");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        add(randomnessLabel, gridBagConstraints);

        randomnessCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Each Word", "Each Syllable" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(randomnessCombo, gridBagConstraints);

        numberPatternsLabel.setText("Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        add(numberPatternsLabel, gridBagConstraints);

        numberPatternsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        numberPatternsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberPatternsSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(numberPatternsSpinner, gridBagConstraints);

        patternsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"CV"}
            },
            new String [] {
                "Pattern"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        patternsTable.getColumnModel().getColumn(0).setCellRenderer(new rwSyllableCellRenderer());
        patternsScroller.setViewportView(patternsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        add(patternsScroller, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void numberPatternsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberPatternsSpinnerStateChanged
        DefaultTableModel dtm=(DefaultTableModel)patternsTable.getModel();
        int orc = dtm.getRowCount();
        int rc=((Integer)numberPatternsSpinner.getValue()).intValue();
        dtm.setRowCount(rc);
        if (rc > orc){
            dtm.setValueAt("CV", rc-1, 0);
        }
    }//GEN-LAST:event_numberPatternsSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel numberPatternsLabel;
    public javax.swing.JSpinner numberPatternsSpinner;
    public javax.swing.JScrollPane patternsScroller;
    public javax.swing.JTable patternsTable;
    public javax.swing.JComboBox randomnessCombo;
    public javax.swing.JLabel randomnessLabel;
    // End of variables declaration//GEN-END:variables
}

class rwSyllableCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                row, column);
        String syllablePattern = value.toString();
        if (syllablePattern.indexOf("[") >= 0 && syllablePattern.indexOf("]") < 0) {
            component.setForeground(Color.red);
            component.setBackground(Color.yellow);
        } else if (syllablePattern.indexOf("[") >= 0 && syllablePattern.indexOf(",") < 0) {
            component.setForeground(Color.red);
            component.setBackground(Color.yellow);
        } else if (syllablePattern.indexOf("{") >= 0 && syllablePattern.indexOf("}") < 0) {
            component.setForeground(Color.red);
            component.setBackground(Color.yellow);
        } else if (syllablePattern.indexOf("{") >= 0 && syllablePattern.indexOf(",") < 0) {
            component.setForeground(Color.red);
            component.setBackground(Color.yellow);
        } else if (syllablePattern.indexOf("{") >= 0 && syllablePattern.indexOf(":") < 0) {
            component.setForeground(Color.red);
            component.setBackground(Color.yellow);
        } else if (syllablePattern.indexOf("(") >= 0 && syllablePattern.indexOf(")") < 0) {
            component.setForeground(Color.red);
            component.setBackground(Color.yellow);
        } else {
            component.setForeground(Color.black);
            component.setBackground(Color.white);
        }
        return component;
    }
}
