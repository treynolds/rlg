/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RwPosRulesDialog.java
 *
 * Created on Feb 12, 2011, 11:41:40 AM
 */

package rw;

import java.awt.Frame;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ted
 */
public class RwPosRulesDialog extends javax.swing.JDialog {
    public int chosenOption;
    public static int CANCEL_OPTION = -1;
    public static int OK_OPTION = 1;
    private int oldrow;
    private int oldcol;

    /** Creates new form RwPosRulesDialog */
    public RwPosRulesDialog(java.awt.Frame parent, boolean modal, HashMap rules) {
        super(parent, modal);
        setTitle("Set Part of Speech Rules");
        initComponents();
        setLocationRelativeTo(parent);
        String[] pos ={"Adjective",
            "Adverb",
            "Article",
            "Comp Adjective",
            "Comp Adverb",
            "Conjunction",
            "Determiner",
            "Interjection",
            "List",
            "Modal",
            "Noun",
            "Noun Plural",
            "Noun Plural Proper",
            "Noun Proper",
            "Number",
            "Particle",
            "Possesive",
            "Pos Pronoun",
            "Predeterminer",
            "Preposition",
            "Pers Pronoun",
            "Pronoun",
            "Super Adjective",
            "Super Adverb",
            "Symbol",
            "There",
            "To",
            "Verb",
            "Verb 3 pers",
            "Verb non 3 pers",
            "Verb Past",
            "Verb Past Part",
            "Verb Gerund",
            "Wh Adverb",
            "Wh Determiner",
            "Wh Pronoun",
            "Pos Wh Pronoun"};
        for(int a=0; a<pos.length; a++){
            System.out.println(pos[a]);
            Vector disRule = (Vector)rules.get(pos[a]);
            rulesTable.setValueAt(disRule.elementAt(0), a, 1);
            rulesTable.setValueAt(disRule.elementAt(1), a, 2);
            rulesTable.setValueAt(disRule.elementAt(2), a, 3);
            rulesTable.setValueAt(disRule.elementAt(3), a, 4);
            rulesTable.setValueAt(disRule.elementAt(4), a, 5);
        }
    }
    public RwPosRulesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        rulesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        rulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Adjective", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Adverb", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Article", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Comp Adjective", null, null, new Integer(-1), null, new Boolean(true)},
                {"Comp Adverb", null, null, new Integer(-1), null, new Boolean(true)},
                {"Conjunction", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Determiner", null, null, new Integer(-1), null, new Boolean(true)},
                {"Interjection", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"List", null, null, new Integer(-1), null, new Boolean(true)},
                {"Modal", null, null, new Integer(-1), null, new Boolean(true)},
                {"Noun", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Noun Plural", null, null, new Integer(-1), null, new Boolean(true)},
                {"Noun Plural Proper", null, null, new Integer(-1), null, new Boolean(true)},
                {"Noun Proper", null, null, new Integer(-1), null, new Boolean(true)},
                {"Number", null, null, new Integer(-1), null, new Boolean(true)},
                {"Particle", null, null, new Integer(-1), null, new Boolean(true)},
                {"Pers Pronoun", null, null, new Integer(-1), null, new Boolean(true)},
                {"Possesive", null, null, new Integer(-1), null, new Boolean(true)},
                {"Pos Pronoun", null, null, new Integer(-1), null, new Boolean(true)},
                {"Predeterminer", null, null, new Integer(-1), null, new Boolean(true)},
                {"Preposition", null, null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Pronoun", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Super Adjective", null, null, new Integer(-1), null, new Boolean(true)},
                {"Super Adverb", null, null, new Integer(-1), null, new Boolean(true)},
                {"Symbol", null, null, new Integer(-1), null, new Boolean(true)},
                {"There", null, null, new Integer(-1), null, new Boolean(true)},
                {"To", null, null, new Integer(-1), null, new Boolean(true)},
                {"Verb", new Boolean(false), null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Verb 3 pers", null, null, new Integer(-1), null, new Boolean(true)},
                {"Verb non 3 pers", null, null, new Integer(-1), null, new Boolean(true)},
                {"Verb Past", null, null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Verb Past Part", null, null, new Integer(-1), new Boolean(false), new Boolean(true)},
                {"Verb Gerund", null, null, new Integer(-1), null, new Boolean(true)},
                {"Wh Adverb", null, null, new Integer(-1), null, new Boolean(true)},
                {"Wh Determiner", null, null, new Integer(-1), null, new Boolean(true)},
                {"Wh Pronoun", null, null, new Integer(-1), null, new Boolean(true)},
                {"Pos Wh Pronoun", null, null, new Integer(-1), null, new Boolean(true)},
                {"cancelled", new Boolean(false), null, null, new Boolean(false), new Boolean(false)}
            },
            new String [] {
                "Part Of Speech", "Enabled", "Rule", "Ex %", "Prefix/Suffix", "Add/Replace"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        rulesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rulesTableMouseClicked(evt);
            }
        });
        rulesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rulesTableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(rulesTable);
        rulesTable.getColumnModel().getColumn(0).setResizable(false);
        rulesTable.getColumnModel().getColumn(0).setPreferredWidth(150);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)this.rulesTable.getModel();
        dtm.setValueAt(true, 37, 1);
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)this.rulesTable.getModel();
        dtm.setValueAt(false, 37, 1);
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void rulesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesTableMouseClicked
        int row = rulesTable.getSelectedRow();
        int col = rulesTable.getSelectedColumn();
        if(col == 2){
            try{
                String rule = (String)rulesTable.getValueAt(row, col);
                int a = -1;
                while((a = rule.indexOf("\\u",a+1))>=0){
                    String unicodeString = rule.substring(a + 2,a + 6);
                    char uniChar = (char)Integer.parseInt(unicodeString, 16);
                    rule = rule.substring(0, a) +
                        uniChar + rule.substring(a+6);
                    rulesTable.setValueAt(rule, row, col);
                }
            }
            catch(NullPointerException ex){

            }
        }
    }//GEN-LAST:event_rulesTableMouseClicked

    private void rulesTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rulesTableKeyTyped
        int row= rulesTable.getSelectedRow();
        int col = rulesTable.getSelectedColumn();
        if(evt.getKeyChar()=='\n'){
            System.out.println(oldrow+", "+oldcol);
            if(col == 2){
                try{
                    String rule = (String)rulesTable.getValueAt(oldrow, oldcol);
                    int a = -1;
                    while((a = rule.indexOf("\\u",a+1))>=0){
                        String unicodeString = rule.substring(a + 2,a + 6);
                        char uniChar = (char)Integer.parseInt(unicodeString, 16);
                        rule = rule.substring(0, a) +
                            uniChar + rule.substring(a+6);
                        rulesTable.setValueAt(rule, oldrow, oldcol);
                    }
                }
                catch(NullPointerException ex){

                }
            }
        } else {
            oldcol = col;
            oldrow = row;
        }
    }//GEN-LAST:event_rulesTableKeyTyped


    public Vector showDialog(Frame parent, boolean modal, HashMap rules){
        RwPosRulesDialog prd = new RwPosRulesDialog(parent, modal, rules);
        prd.setVisible(true);
        DefaultTableModel dtm = (DefaultTableModel)prd.rulesTable.getModel();
        Vector r = dtm.getDataVector();
        return r;
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RwPosRulesDialog dialog = new RwPosRulesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTable rulesTable;
    // End of variables declaration//GEN-END:variables

}
